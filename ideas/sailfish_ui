#!/usr/bin/env python3


from app_config import Sailfish
from solver import make_solver
from collections import deque
from dataclasses import dataclass
from rich.console import Console
from rich.live import Live
from rich.table import Table
from rich.console import group
from rich.panel import Panel
from rich.progress import Progress
from new_kernels import perf_time_sequence, configure_kernel_module


@dataclass
class iteration_report:
    iteration: int
    time: float
    zones_per_second: float


class Dashboard:
    """
    A rich-renderable run monitor
    """

    def __init__(self, app: Sailfish):
        progress = Progress()
        duration = app.driver.tfinal - app.driver.tstart
        run_task = progress.add_task("running...", total=duration)

        self.app = app
        self.progress = progress
        self.run_task = run_task
        self.reports = deque()
        self.perf_timer = perf_time_sequence(mode=app.hardware)
        self.line = None

    def reports_table(self):
        table = Table(expand=True)
        table.add_column("iteration", style="cyan", justify="right")
        table.add_column("time", style="green")
        table.add_column("zones per second (millions)", style="magenta", justify="left")

        reports = self.reports

        for report in reports:
            table.add_row(
                f"{report.iteration}",
                f"{report.time:0.5f}",
                f"{report.zones_per_second/1e6:0.3f}",
            )
        table.add_section()
        avg_zps = sum(r.zones_per_second for r in reports) / max(1, len(reports))
        table.add_row(None, None, f"{avg_zps/1e6:0.3f}", style="italic")
        return table

    def update(self, state):
        fold = self.app.driver.report.cadence
        evolved_time = state.time - self.app.driver.tstart

        if state.iteration % fold == 0:
            self.progress.update(self.run_task, completed=evolved_time)
            zps = state.total_zones / next(self.perf_timer) * fold
            report = iteration_report(state.iteration, state.time, zps)
            self.reports.append(report)

            if len(self.reports) > 20:
                self.reports.popleft()

            if self.app.plot:
                from matplotlib import pyplot as plt
                from numpy import linspace

                p = state.primitive

                if self.line is None:
                    x = linspace(0.0, 1.0, p.shape[0])
                    plt.ion()
                    fig, ax = plt.subplots()
                    ln = self.line = ax.plot(x, p[:, 0], mfc="none")[0]
                else:
                    if not plt.get_fignums():
                        return  # the figure window was closed

                    ln = self.line
                    ln.set_ydata(p[:, 0])

                ln.figure.canvas.draw_idle()
                ln.figure.canvas.flush_events()

    @group()
    def render(self):
        yield self.app
        yield self.reports_table()
        yield Panel(self.progress)


def run(app: Sailfish):
    console = Console(width=100)
    configure_kernel_module(default_exec_mode=app.hardware)

    solver = make_solver(app)
    dashboard = Dashboard(app)
    state = next(solver)

    with Live(dashboard.render(), console=console, refresh_per_second=30) as view:
        while state.time < app.driver.tfinal:
            state = next(solver)
            dashboard.update(state)
            view.update(dashboard.render())


def main():
    from argparse import ArgumentParser
    from json import load

    def resolution(arg):
        res = tuple(int(i) for i in arg.split(","))

        if len(res) == 1:
            return res + (1, 1)
        if len(res) == 2:
            return res + (1,)
        if len(res) == 3:
            return res
        raise ValueError(f"invalid argument for resolution {arg}")

    parser = ArgumentParser()
    parser.add_argument("config", nargs="?")
    parser.add_argument("-n", "--resolution", type=resolution, default=None)
    parser.add_argument("-f", "--fold", type=int, default=None)
    args = parser.parse_args()

    from loguru import logger
    from reporting import configure_logger

    configure_logger(logger, "warning")

    if args.config:
        with open(args.config) as infile:
            app = Sailfish(**load(infile))
    else:
        app = Sailfish()

    if args.resolution is not None:
        app.domain.num_zones = args.resolution
    if args.fold is not None:
        app.driver.report.cadence = args.fold

    run(app)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print()
        print("ctrl-c interrupt")
