#!/usr/bin/env python3


from argparse import ArgumentParser, SUPPRESS
from collections import deque
from collections.abc import Mapping, Iterable
from contextlib import contextmanager
from dataclasses import asdict, dataclass
from datetime import datetime
from itertools import chain, product
from pickle import load as load_pickle, dump as dump_pickle
from json import load as load_json, dump as dump_json, dumps as dumps_json
from logging import getLogger
from typing import Any

from models import Sailfish, Driver, Report, Strategy, Scheme, Checkpoint
from kernels import perf_time_sequence, configure_kernel_module
from solver import make_solver
from system import system_info


@dataclass
class iteration_report:
    """
    Light-weight status of an iteration or group of iterations
    """

    iteration: int
    time: float
    zps: float

    def __repr__(self):
        return (
            f"[{self.iteration:06d}] "
            f"t={self.time:0.5f} "
            f"Mzps={self.zps/1e6:0.3f} "
        )

    def __rich_console__(self, *args):
        yield (
            f"[cyan]{self.iteration:06d}[/cyan] "
            f"[green]t={self.time:0.5f}[/green] "
            f"[magenta]Mzps={self.zps/1e6:0.3f}[/magenta]"
        )


@dataclass
class run_summary:
    """
    Light-weight epilog of a run
    """

    config: Sailfish
    total_sec: float
    mean_zps: float


@dataclass
class event_state:
    number: int
    last_time: float


def recurring_event(interval: float, number: int = 0, last_time: float = None):
    """
    A generator which yields True or False based on whether a task is due
    """
    is_due = None

    while True:
        time = yield is_due and event_state(number, last_time)

        if time == 0.0:
            is_due = True
            last_time = time

        elif time >= last_time + interval:
            is_due = True
            number += 1
            last_time = last_time + interval

        else:
            is_due = False


def timeseries(config, state, timeseries, event_states):
    number = event_states["timeseries"].number
    time = timeseries.setdefault("time", list())
    time.append(state.time)

    return f"timeseries {number}"


def checkpoint(config, state, timeseries, event_states):
    number = event_states["checkpoint"].number
    filename = f"chkpt.{number:04d}.pk"

    with open(filename, "wb") as outf:
        dump_pickle(
            dict(
                config=asdict(config),
                primitive=state.primitive,
                time=state.time,
                iteration=state.iteration,
                timeseries=timeseries,
                event_states={k: asdict(v) for k, v in event_states.items()},
            ),
            outf,
        )

    return filename


def drive(setups: Iterable[tuple[Sailfish, dict]]):
    """
    Main simulation driver function

    This function drives a sequence of applications. The `setups` argument is
    a sequence of tuples: a `Sailfish` configuration instance, and a possible
    checkpoint file from which the run is to be restarted.

    This function does not write anything to the console, instead it yields
    items to be dealt with by a run monitor: either a terminal scrollback or
    dashboard, or maybe eventually a full UI.

    This function does handle checkpointing and the collection of time series
    data from the solver.
    """
    for config, chkpt in setups:
        yield config

        configure_kernel_module(default_exec_mode=config.hardware)

        driver = config.driver
        fold = driver.report.cadence
        tfinal = driver.tfinal
        states = make_solver(config, chkpt)
        timeseries_data = dict()
        zps_log = list()
        app_timer = perf_time_sequence(mode=config.hardware)
        fld_timer = perf_time_sequence(mode=config.hardware)

        # =====================================================================
        # Set up timeseries and checkpoint task handlers
        # =====================================================================
        if chkpt:
            ts_state = chkpt["event_states"]["timeseries"]
            cp_state = chkpt["event_states"]["checkpoint"]
        else:
            ts_state = dict()
            cp_state = dict()
        event_states = dict()
        events = dict(
            timeseries=recurring_event(driver.timeseries.cadence, **ts_state),
            checkpoint=recurring_event(driver.checkpoint.cadence, **cp_state),
        )
        event_funcs = dict(
            timeseries=timeseries,
            checkpoint=checkpoint,
        )
        for event in events.values():
            event.send(None)

        # =====================================================================
        # Get initial state from solver, and start the main loop
        # =====================================================================
        state = next(states)

        while True:
            for name in events:
                if e := events[name].send(state.time):
                    event_states[name] = e
                    yield event_funcs[name](
                        config, state, timeseries_data, event_states
                    )

            if state.time >= tfinal:
                break

            state = next(states)

            if state.iteration % fold == 0:
                sec = next(fld_timer)
                zps = state.total_zones / sec * fold
                if state.iteration > 0:
                    zps_log.append(zps)
                yield iteration_report(state.iteration, state.time, zps)

        yield state
        yield run_summary(config, next(app_timer), sum(zps_log) / max(1, len(zps_log)))


def scrollback(print):
    """
    A run monitor that writes run status and iteration reports to the console

    The print function can be builtin, or something else such as rich.print.
    """
    while True:
        event = yield

        if type(event) is Sailfish:
            config = event
            print(config)

        elif type(event) is run_summary:
            summary = event
            print()
            print(summary)
            print()

        elif type(event) is iteration_report:
            report = event
            print(report)

        else:
            print(event)


def reports_table(reports: Iterable[iteration_report]):
    """
    Generate a rich table from a sequence of iteration reports
    """
    from rich.table import Table
    from rich.panel import Panel

    table = Table(expand=True, show_edge=False)
    table.add_column("iteration", style="cyan", justify="right")
    table.add_column("time", style="green")
    table.add_column("zones per second (millions)", style="magenta", justify="left")

    for report in reports:
        table.add_row(
            f"{report.iteration}",
            f"{report.time:0.5f}",
            f"{report.zps/1e6:0.3f}",
        )

    table.add_section()

    if any(reports):
        avg_zps = sum(r.zps for r in reports) / max(1, len(reports))
        table.add_row(None, None, f"{avg_zps/1e6:0.3f}", style="italic")

    return Panel(table, style="dim", border_style="blue", padding=(2, 2))


def summaries_table(summaries: list[run_summary]):
    """
    Generate a rich table from a sequence of run summary reports
    """

    from rich.table import Table
    from rich.panel import Panel

    table = Table(expand=True, show_edge=False)
    table.add_column("run name", style="cyan", justify="left")
    table.add_column("<zones per second> (millions)", style="magenta", justify="left")

    for summary in summaries:
        table.add_row(f"{summary.config.name}", f"{summary.mean_zps/1e6:0.5f}")

    return Panel(table, style="dim", border_style="red", padding=(2, 2))


def checkpoints_table(checkpoints: list[str]):
    from rich.columns import Columns
    from rich.panel import Panel

    return Panel(
        Columns(checkpoints),
        border_style="red",
        padding=(2, 2),
    )


def dashboard(console, screen=False):
    from rich.live import Live
    from rich.pretty import Pretty
    from rich.progress import Progress
    from rich.layout import Layout
    from rich.panel import Panel

    reports = deque()
    summaries = list()
    progress = Progress()
    checkpoints = list()
    app_struct = str()
    job_num = 0

    config_view = Layout(str(), name="config", ratio=5)
    progress_view = Layout(
        Panel(
            progress,
            title="Job Progress",
            padding=(2, 2),
            border_style="green",
        ),
        ratio=3,
        name="progress",
    )
    reports_view = Layout(reports_table(reports), name="reports", ratio=3)
    summaries_view = Layout(summaries_table(reports), name="summaries", ratio=5)
    checkpoints_view = Layout(checkpoints_table(checkpoints), name="checkpoints")

    root = Layout(name="root")
    root.split_column(Layout(name="upper", ratio=2), Layout(name="lower", ratio=3))
    root["upper"].split_row(config_view, progress_view)
    root["lower"].split_row(Layout(name="lower-left", ratio=3), summaries_view)
    root["lower-left"].split_column(reports_view, checkpoints_view)

    with Live(
        root,
        console=console,
        auto_refresh=False,
        screen=screen,
    ) as live:
        while True:
            event = yield

            if type(event) is Sailfish:
                config = event
                job_num += 1
                duration = config.driver.tfinal - config.driver.tstart
                run_task = progress.add_task(f"job {job_num}", total=duration)
                config_view.update(
                    Panel(
                        Pretty(config),
                        title="Run Description",
                        padding=(2, 2),
                        border_style="bright_blue",
                    )
                )
                checkpoints.clear()

            elif type(event) is iteration_report:
                report = event
                reports.append(report)

                if len(reports) > 20:
                    reports.popleft()

                reports_view.update(reports_table(reports))
                evolved_time = report.time - config.driver.tstart
                progress.update(run_task, completed=evolved_time)

            elif type(event) is str and "chkpt" in event:
                checkpoints.append(event)
                checkpoints_view.update(checkpoints_table(checkpoints))

            elif type(event) is run_summary:
                summary = event
                reports = deque()
                summaries.append(summary)
                summaries_view.update(summaries_table(summaries))

            live.refresh()


def plot():
    from matplotlib import pyplot as plt

    fig = plt.figure()

    while True:
        event = yield

        if hasattr(event, "primitive"):
            state = event

        if type(event) is run_summary:
            if plt.get_fignums():
                ax1 = fig.add_subplot(111)
                ax1.plot(state.primitive[:, 0], "-o", mfc="none")
                plt.show()


def no_plot():
    while True:
        yield


def parse_num_zones(arg):
    """
    Promote an integer or two-tuple to a three-tuple of integers

    This factory function is used by the argparse type parameter to convert
    user input to a domain.num_zones parameter.
    """
    res = tuple(int(i) for i in arg.split(","))

    if len(res) == 1:
        return res + (1, 1)
    if len(res) == 2:
        return res + (1,)
    if len(res) == 3:
        return res
    raise ValueError(f"invalid argument for num_zones {arg}")


def parse_reconstruction(arg):
    """
    Promote a string to a reconstruction model

    This factory function is used by the argparse type parameter to convert
    user input to a scheme.reconstruction parameter.
    """
    try:
        mode, theta = arg.split(":")
        return mode, float(theta)
    except ValueError:
        if arg == "plm":
            return arg, 1.5
        else:
            return arg


def deep_update(d, u):
    """
    Update a dictionary and any nested dictionaries recursively
    """
    for k, v in u.items():
        if isinstance(v, Mapping):
            d[k] = deep_update(d.get(k, dict()), v)
        else:
            d[k] = v
    return d


def unflatten(d):
    """
    Create a nested dict from a flat one with keys like a.b.c
    """
    res = dict()
    for key, value in d.items():
        parts = key.split(".")
        d = res
        for part in parts[:-1]:
            if part not in d:
                d[part] = dict()
            d = d[part]
        d[parts[-1]] = value
    return res


def init_logging(level):
    from rich.console import Console
    from rich.logging import RichHandler

    console = Console()
    handler = RichHandler(omit_repeated_times=False, console=console)
    logger = getLogger("sailfish")
    logger.addHandler(handler)
    logger.setLevel(level.upper())

    return console


def scan_strategies():
    d = {
        "strategy.data_layout": ("fields-last", "fields-first"),
        "strategy.cache_flux": (True, False),
        "strategy.cache_prim": (True, False),
        "strategy.cache_grad": (True, False),
    }
    for p in product(*d.values()):
        yield unflatten(dict(name=str(p), **dict(zip(d.keys(), p))))


def sailfish_presets():
    return {"scan-strategies": scan_strategies()}


def sailfish(config, overrides):
    """
    Yield a sequence of sailfish app structs from a config

    The config may be the name of a preset, which may then be a dictionary
    or sequence of dictionaries, or it may be a path to a json file
    containing a dictionary or a list of dictionaries.
    """
    presets = sailfish_presets()
    chkpt = None

    if not config:
        cs = dict()
    elif config in presets:
        cs = presets[config]
    elif config.endswith(".json"):
        with open(config) as infile:
            cs = load_json(infile)
    elif config.endswith(".pk"):
        with open(config, "rb") as infile:
            chkpt = load_pickle(infile)
            cs = chkpt["config"]
    else:
        raise ValueError("config must be a preset or a json file")

    if type(cs) is dict:
        cs = [cs]

    for c in cs:
        s = asdict(Sailfish())
        deep_update(s, c)
        deep_update(s, overrides)
        yield Sailfish(**s), chkpt


def argument_parser():
    """
    Create an argument parser instance for running from the command line
    """
    parser = ArgumentParser(
        prog="sailfish_ui",
        usage=SUPPRESS,
        description="sailfish is a GPU-accelerated astrophysical gasdynamics code",
    )
    subparsers = parser.add_subparsers()
    sys = subparsers.add_parser("sys", help="how platform and hardware information")
    doc = subparsers.add_parser("doc", help="read documentation")
    run = subparsers.add_parser("run", help="run a simulation")

    sys.set_defaults(_command="sys")
    doc.set_defaults(_command="doc")
    run.set_defaults(_command="run")

    run.add_argument(
        "_configs",
        metavar="configs",
        nargs="*",
        default=[dict()],
        help="sequence of configuration files, checkpoints, or preset/setup names",
    )
    parser.add_argument(
        "--log-level",
        dest="_log_level",
        default="warning",
        choices=("debug", "info", "warning", "error", "critical"),
        help="log messages at and above this severity level",
    )
    run.add_argument(
        "--dash",
        dest="_dash",
        action="store_true",
        help="show a dashboard instead of a scrollback",
    )
    run.add_argument(
        "--screen",
        dest="_screen",
        action="store_true",
        help="transient screen in dash mode (better look but disappears after the run)",
    )
    run.add_argument(
        "--plot",
        dest="_plot",
        action="store_true",
        help="show a plot of the solution",
    )
    run.add_argument(
        "--dump-summaries",
        dest="_dump_summaries",
        action="store_true",
        help="dump a JSON object with run summaries",
    )
    run.add_argument(
        "--mode",
        "--hardware",
        dest="hardware",
        choices=Sailfish.type_args("hardware"),
        help="execution mode",
    )
    run.add_argument(
        "-n",
        "--num-zones",
        "--resolution",
        type=parse_num_zones,
        dest="domain.num_zones",
        metavar="N",
    )
    run.add_argument(
        "-m",
        "--time-integration",
        choices=Scheme.type_args("time_integration"),
        help=Scheme.describe("time_integration"),
        dest="scheme.time_integration",
    )
    run.add_argument(
        "-r",
        "--reconstruction",
        type=parse_reconstruction,
        help=Scheme.describe("reconstruction"),
        dest="scheme.reconstruction",
        metavar="R",
    )
    run.add_argument(
        "-e",
        "--tfinal",
        type=float,
        help=Driver.describe("tfinal"),
        dest="driver.tfinal",
        metavar="T",
    )
    run.add_argument(
        "-f",
        "--fold",
        "--report-cadence",
        type=int,
        help=Report.describe("cadence"),
        dest="driver.report.cadence",
        metavar="F",
    )
    run.add_argument(
        "--checkpoint",
        "-c",
        type=float,
        dest="driver.checkpoint.cadence",
        metavar="C",
    )
    run.add_argument(
        "--timeseries",
        "-t",
        type=float,
        dest="driver.timeseries.cadence",
        metavar="T",
    )
    run.add_argument(
        "--data-layout",
        type=str,
        choices=Strategy.type_args("data_layout"),
        help=Strategy.describe("data_layout"),
        dest="strategy.data_layout",
    )
    run.add_argument(
        "--cache-prim",
        action="store_true",
        dest="strategy.cache_prim",
        default=None,
    )
    run.add_argument(
        "--cache-flux",
        action="store_true",
        dest="strategy.cache_flux",
        default=None,
    )
    run.add_argument(
        "--cache-grad",
        action="store_true",
        dest="strategy.cache_grad",
        default=None,
    )
    return parser


def run(args, console):
    overrides = unflatten(
        {k: v for k, v in vars(args).items() if v is not None and k[0] != "_"}
    )
    runs = chain(*(sailfish(cfg, overrides) for cfg in args._configs))
    summaries = list()

    try:
        if args._dash:
            monitor = dashboard(console, args._screen)
        else:
            monitor = scrollback(console.print)
        if args._plot:
            plotter = plot()
        else:
            plotter = no_plot()

        next(monitor)
        next(plotter)

        for event in drive(runs):
            monitor.send(event)
            plotter.send(event)

            if type(event) is run_summary:
                summaries.append(asdict(event))

    except Exception:
        monitor.close()
        plotter.close()
        console.print_exception()

    finally:
        if args._dump_summaries:
            fname = datetime.now().strftime("%m-%d-%Y-%H%M.json")
            dump = dict(summaries=summaries, system_info=system_info())
            with open(fname, "w") as outf:
                console.print(f"write summaries to {fname}")
                dump_json(dump, outf, indent=4)


def doc(args, console):
    from rich.markdown import Markdown

    console.print(Driver())
    console.print()
    console.print(Strategy())
    console.print()
    console.print(Scheme())


def sys(args, console):
    console.print(system_info())


def main():
    """
    Main sailfish entry point and command line interface
    """
    parser = argument_parser()
    args = parser.parse_args()
    console = init_logging(args._log_level)

    if args._command == "run":
        run(args, console)
    if args._command == "doc":
        doc(args, console)
    if args._command == "sys":
        sys(args, console)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print()
        print("ctrl-c interrupt")
