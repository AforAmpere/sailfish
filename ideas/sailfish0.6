#!/usr/bin/env python3


from argparse import ArgumentParser, SUPPRESS
from collections import deque
from collections.abc import Mapping
from dataclasses import asdict, dataclass
from itertools import chain, product
from json import load as load_json, dumps as dumps_json
from logging import getLogger

from app_config import Sailfish, Driver, Report, Strategy, Scheme
from new_kernels import perf_time_sequence, configure_kernel_module
from solver import make_solver


@dataclass
class iteration_report:
    iteration: int
    time: float
    zps: float

    def __repr__(self):
        return (
            f"[{self.iteration:06d}] "
            f"t={self.time:0.5f} "
            f"Mzps={self.zps/1e6:0.3f} "
        )

    def __rich_console__(self, *args):
        yield (
            f"[cyan]{self.iteration:06d}[/cyan] "
            f"[green]t={self.time:0.5f}[/green] "
            f"[magenta]Mzps={self.zps/1e6:0.3f}[/magenta]"
        )


@dataclass
class run_summary:
    app: Sailfish
    total_sec: float
    mean_zps: float

    def __repr__(self):
        return (
            f"run name: {self.app.name}\n"
            f"total run time: {self.total_sec:0.5f} sec\n"
            f"mean Mzps: {self.mean_zps/1e6:0.3f}"
        )


def run(apps: list[Sailfish]):
    for app in apps:
        yield app

        configure_kernel_module(default_exec_mode=app.hardware)

        fold = app.driver.report.cadence
        tfinal = app.driver.tfinal
        states = make_solver(app)
        state = next(states)
        app_timer = perf_time_sequence(mode=app.hardware)
        fld_timer = perf_time_sequence(mode=app.hardware)

        sum_zps = 0.0
        fld_num = 0

        while state.time < tfinal:
            state = next(states)

            if state.iteration % fold == 0:
                sec = next(fld_timer)
                zps = state.total_zones / sec * fold
                sum_zps += zps
                fld_num += 1
                yield iteration_report(state.iteration, state.time, zps)
                yield state

        yield run_summary(app, next(app_timer), sum_zps / fld_num)
        yield state


def scrollback_run_monitor(print):
    while True:
        event = yield

        if type(event) is Sailfish:
            app = event
            print(app)

        elif type(event) is run_summary:
            summary = event
            print()
            print(summary)
            print()

        elif type(event) is iteration_report:
            report = event
            print(report)


def reports_table(reports: list[iteration_report]):
    from rich.table import Table
    from rich.panel import Panel

    table = Table(expand=True, show_edge=False)
    table.add_column("iteration", style="cyan", justify="right")
    table.add_column("time", style="green")
    table.add_column("zones per second (millions)", style="magenta", justify="left")

    for report in reports:
        table.add_row(
            f"{report.iteration}",
            f"{report.time:0.5f}",
            f"{report.zps/1e6:0.3f}",
        )

    table.add_section()

    if any(reports):
        avg_zps = sum(r.zps for r in reports) / max(1, len(reports))
        table.add_row(None, None, f"{avg_zps/1e6:0.3f}", style="italic")

    return Panel(table, border_style="blue")


def summaries_table(summaries: list[run_summary]):
    from rich.table import Table
    from rich.panel import Panel

    table = Table(expand=True, show_edge=False)
    table.add_column("run name", style="cyan", justify="left")
    table.add_column("<zones per second> (millions)", style="magenta", justify="left")

    for summary in summaries:
        table.add_row(f"{summary.app.name}", f"{summary.mean_zps/1e6:0.5f}")

    return Panel(table, border_style="red")


def dashboard_run_monitor(console):
    from rich.live import Live
    from rich.pretty import Pretty
    from rich.progress import Progress
    from rich.layout import Layout
    from rich.panel import Panel

    reports = deque()
    summaries = list()
    progress = Progress()
    app_struct = str()
    job_num = 0

    app_view = Layout(str(), name="app")
    progress_view = Layout(
        Panel(
            progress,
            title="Job Progress",
            padding=(2, 2),
            border_style="green",
        ),
        name="progress",
    )
    reports_view = Layout(reports_table(reports), name="reports", ratio=5)
    summaries_view = Layout(summaries_table(reports), name="summaries", ratio=3)

    root = Layout(name="root")
    root.split_column(Layout(name="upper", ratio=2), Layout(name="lower", ratio=3))
    root["upper"].split_row(app_view, progress_view)
    root["lower"].split_row(reports_view, summaries_view)

    with Live(
        root,
        console=console,
        refresh_per_second=4,
        screen=True,
    ) as live:
        while True:
            event = yield

            if type(event) is Sailfish:
                app = event
                job_num += 1
                duration = app.driver.tfinal - app.driver.tstart
                run_task = progress.add_task(f"job {job_num}", total=duration)
                app_view.update(
                    Panel(
                        Pretty(app),
                        title="Run Description",
                        padding=(2, 2),
                        border_style="bright_blue",
                    )
                )

            elif type(event) is iteration_report:
                report = event
                reports.append(report)

                if len(reports) > 20:
                    reports.popleft()
                reports_view.update(reports_table(reports))

            elif type(event) is run_summary:
                summary = event
                reports = deque()
                summaries.append(summary)
                summaries_view.update(summaries_table(summaries))

            else:
                state = event
                evolved_time = state.time - app.driver.tstart
                progress.update(run_task, completed=evolved_time)


def num_zones(arg):
    """
    Promote an integer or two-tuple to a three-tuple of integers

    This factory function is used by the argparse type parameter to convert
    user input to a domain.num_zones parameter.
    """
    res = tuple(int(i) for i in arg.split(","))

    if len(res) == 1:
        return res + (1, 1)
    if len(res) == 2:
        return res + (1,)
    if len(res) == 3:
        return res
    raise ValueError(f"invalid argument for num_zones {arg}")


def reconstruction(arg):
    """
    Promote a string to a reconstruction model

    This factory function is used by the argparse type parameter to convert
    user input to a scheme.reconstruction parameter.
    """
    try:
        mode, theta = arg.split(":")
        return mode, float(theta)
    except ValueError:
        if arg == "plm":
            return arg, 1.5
        else:
            return arg


def deep_update(d, u):
    """
    Update a dictionary and any nested dictionaries recursively
    """
    for k, v in u.items():
        if isinstance(v, Mapping):
            d[k] = deep_update(d.get(k, dict()), v)
        else:
            d[k] = v
    return d


def unflatten(d):
    """
    Create a nested dict from a flat one with keys like a.b.c
    """
    res = dict()
    for key, value in d.items():
        parts = key.split(".")
        d = res
        for part in parts[:-1]:
            if part not in d:
                d[part] = dict()
            d = d[part]
        d[parts[-1]] = value
    return res


def scan_strategies():
    d = {
        "strategy.data_layout": ("fields-last", "fields-first"),
        "strategy.cache_flux": (True, False),
        "strategy.cache_prim": (True, False),
        "strategy.cache_grad": (True, False),
    }
    for p in product(*d.values()):
        yield unflatten(dict(name=str(p), **dict(zip(d.keys(), p))))


def sailfish_presets():
    return {"scan-strategies": scan_strategies()}


def sailfish(config, overrides):
    """
    Yield a sequence of sailfish app structs from a config

    The config may be the name of a preset, which may then be a dictionary
    or sequence of dictionaries, or it may be a path to a json file
    containing a dictionary or a list of dictionaries.
    """
    presets = sailfish_presets()

    if not config:
        cs = dict()
    elif config in presets:
        cs = presets[config]
    elif config.endswith(".json"):
        with open(config) as infile:
            cs = load_json(infile)
    else:
        raise ValueError("config must be a preset or a json file")

    if type(cs) is dict:
        cs = [cs]

    for c in cs:
        s = asdict(Sailfish())
        deep_update(s, c)
        deep_update(s, overrides)
        yield Sailfish(**s)


def main():
    """
    Main sailfish entry point and command line interface
    """
    from rich.console import Console
    from rich.logging import RichHandler
    from rich.traceback import install as install_rich_traceback

    parser = ArgumentParser(
        prog="sailfish_ui",
        usage=SUPPRESS,
        description="sailfish is a GPU-accelerated astrophysical gasdynamics code",
    )
    parser.add_argument(
        "_configs",
        metavar="configs",
        nargs="*",
        default=[dict()],
    )
    parser.add_argument(
        "--log-level",
        dest="_log_level",
        default="warning",
        choices=("debug", "info", "warning", "error", "critical"),
        help="log messages at and above this severity level",
    )
    # parser.add_argument(
    #     "--debug",
    #     action="store_true",
    #     dest="_debug",
    # )
    # parser.add_argument(
    #     "--plot",
    #     nargs="?",
    #     const="end",
    #     help=Sailfish.describe("plot"),
    #     choices=(None, "live", "end"),
    #     dest="plot",
    # )
    # parser.add_argument(
    #     "--show-config",
    #     choices=Sailfish.type_args("show_config"),
    #     help=Sailfish.describe("show_config"),
    #     type=str,
    #     dest="show_config",
    # )
    parser.add_argument(
        "--mode",
        "--hardware",
        dest="hardware",
        choices=Sailfish.type_args("hardware"),
        help="execution mode",
    )
    parser.add_argument(
        "-n",
        "--num-zones",
        "--resolution",
        type=num_zones,
        dest="domain.num_zones",
        metavar="N",
    )
    parser.add_argument(
        "-m",
        "--time-integration",
        choices=Scheme.type_args("time_integration"),
        help=Scheme.describe("time_integration"),
        dest="scheme.time_integration",
    )
    parser.add_argument(
        "-r",
        "--reconstruction",
        type=reconstruction,
        help=Scheme.describe("reconstruction"),
        dest="scheme.reconstruction",
        metavar="R",
    )
    parser.add_argument(
        "-e",
        "--tfinal",
        type=float,
        help=Driver.describe("tfinal"),
        dest="driver.tfinal",
        metavar="T",
    )
    parser.add_argument(
        "-f",
        "--fold",
        "--report-cadence",
        type=int,
        help=Report.describe("cadence"),
        dest="driver.report.cadence",
        metavar="F",
    )
    parser.add_argument(
        "--data-layout",
        type=str,
        choices=Strategy.type_args("data_layout"),
        help=Strategy.describe("data_layout"),
        dest="strategy.data_layout",
    )
    parser.add_argument(
        "--cache-prim",
        action="store_true",
        dest="strategy.cache_prim",
        default=None,
    )
    parser.add_argument(
        "--cache-flux",
        action="store_true",
        dest="strategy.cache_flux",
        default=None,
    )
    parser.add_argument(
        "--cache-grad",
        action="store_true",
        dest="strategy.cache_grad",
        default=None,
    )
    args = parser.parse_args()

    # =========================================================================
    # Configure logging
    # =========================================================================
    console = Console()
    handler = RichHandler(omit_repeated_times=False, console=console)
    logger = getLogger("sailfish")
    logger.addHandler(handler)
    logger.setLevel(args._log_level.upper())

    install_rich_traceback()

    # =========================================================================
    # Extract model configuration from parser args
    # =========================================================================
    overrides = unflatten(
        {k: v for k, v in vars(args).items() if v is not None and k[0] != "_"}
    )

    # =========================================================================
    # Generate a sequence of sailfish app structs and run them
    # =========================================================================
    apps = chain(*(sailfish(cfg, overrides) for cfg in args._configs))
    # monitor = scrollback_run_monitor(console.print)

    monitor = dashboard_run_monitor(console)
    next(monitor)

    for event in run(apps):
        monitor.send(event)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print()
        print("ctrl-c interrupt")
